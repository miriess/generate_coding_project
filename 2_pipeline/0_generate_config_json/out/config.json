{
  "jup_nb_file": "\n{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
  "read_me_text": "\n# Project Title\n*Give an explanation about the project.*\n\n## Motivation\n*Why is this project? What is its purpose.*\n\n## Features\n*What does it do and why is that awesome?*\n\n## Code Example\n*Show how the project does what it does.*\n\n## How to use?\n*What to do to use it - concise and direct.*\n",
  "structure_read_me_text": "\n# Rules\n1. Never modify `0_data`.\n2. Only save to `pipeline` folder.\n3. Only load from `0_data` or `out`.\n4. Anything in `tmp` can be deleted\n\n## Explanations\n- `0_data` contains all the input data that is either retrieved from external sources or created manually. For example, this includes data downloaded from databases such as Compustat, but also an Excel sheet with data that you manually classiBed. The core principle here is that nothing in this folder should ever be modiBed. The data in this folder should remain identical to the way that you have retrieved or manually created it.\n- `1_code` contains all your code fils. This includes, for example, code fils for Python, Stata, R, or SAS (or a combination thereof). Furthermore, I recommend to name your code files starting with a number to indicate the order of execution. This makes it obvious in what order fils should be executed (which you could also further formalize in a *.bat / .sh* file if you wanted to).\n- `2_pipeline` contains a separate sub-folder for each code file included in the 1_code folder, they correspond based on the name (minus the file extension). This implies, for example, that a code file *0_load_data.ipynb* in 1_code would have a sub-folder in the 2_pipeline folder with the name *0_load_data*. The main idea is that all output generated by a code file ends up in their corresponding pipeline folder. This makes it very easy to understand how data is flowing between code files as the data location indicates where it was generated. To further organize the generated outputs, I advise the following folders in each sub-folder: out, store, and tmp.\n- `2_pipeline -> sub-folder -> out` contains fils that you save with the intention of loading them in a future code file. These are usually the \"end-products\" of the current code file.\n- `2_pipeline -> sub-folder -> store` contains files that you save with the intention of loading them in the current code file. This is, for example, used in scenarios where it takes a while to run parts of your code and to avoid having to re-run these parts every time you might want to intermittently save the progress of your generated data to the store folder.\n- `2_pipeline -> sub-folder -> tmp` contains files that you save for inspection purposes or some other temporary reason. The basic principle is that you should not have to worry about anything in the tmp folder being deleted as it only serves a temporary purpose.\n- `3_output` contains any final output files that are intended to go into the paper. This includes files such as tables and figures.\n\n## Additional Rules\n- Only load data into the code from either `0_data` or any of the `out` folders in the `2_pipeline` sub-folders.\n   - Only load data from `out` folders belonging to code files that are executed before the current file.\n- Always set working directory as top-level project directory and use relative paths.\n"
}
